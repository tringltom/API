// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220317164039_Skills")]
    partial class Skills
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateApproved")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("XpReward")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Domain.ActivityCreationCounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityCreationCounters");
                });

            modelBuilder.Entity("Domain.ActivityMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityMedia");
                });

            modelBuilder.Entity("Domain.ActivityReviewXp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Xp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("ReviewTypeId", "ActivityTypeId")
                        .IsUnique();

                    b.ToTable("ActivityReviewXp");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityTypeId = 1,
                            ReviewTypeId = 1,
                            Xp = 0
                        },
                        new
                        {
                            Id = 2,
                            ActivityTypeId = 1,
                            ReviewTypeId = 2,
                            Xp = 20
                        },
                        new
                        {
                            Id = 3,
                            ActivityTypeId = 1,
                            ReviewTypeId = 3,
                            Xp = 50
                        },
                        new
                        {
                            Id = 4,
                            ActivityTypeId = 1,
                            ReviewTypeId = 4,
                            Xp = 200
                        },
                        new
                        {
                            Id = 5,
                            ActivityTypeId = 2,
                            ReviewTypeId = 1,
                            Xp = -10
                        },
                        new
                        {
                            Id = 6,
                            ActivityTypeId = 2,
                            ReviewTypeId = 2,
                            Xp = 0
                        },
                        new
                        {
                            Id = 7,
                            ActivityTypeId = 2,
                            ReviewTypeId = 3,
                            Xp = 10
                        },
                        new
                        {
                            Id = 8,
                            ActivityTypeId = 2,
                            ReviewTypeId = 4,
                            Xp = 40
                        },
                        new
                        {
                            Id = 9,
                            ActivityTypeId = 3,
                            ReviewTypeId = 1,
                            Xp = 0
                        },
                        new
                        {
                            Id = 10,
                            ActivityTypeId = 3,
                            ReviewTypeId = 2,
                            Xp = 0
                        },
                        new
                        {
                            Id = 11,
                            ActivityTypeId = 3,
                            ReviewTypeId = 3,
                            Xp = 20
                        },
                        new
                        {
                            Id = 12,
                            ActivityTypeId = 3,
                            ReviewTypeId = 4,
                            Xp = 50
                        },
                        new
                        {
                            Id = 13,
                            ActivityTypeId = 4,
                            ReviewTypeId = 1,
                            Xp = 0
                        },
                        new
                        {
                            Id = 14,
                            ActivityTypeId = 4,
                            ReviewTypeId = 2,
                            Xp = 0
                        },
                        new
                        {
                            Id = 15,
                            ActivityTypeId = 4,
                            ReviewTypeId = 3,
                            Xp = 20
                        },
                        new
                        {
                            Id = 16,
                            ActivityTypeId = 4,
                            ReviewTypeId = 4,
                            Xp = 40
                        },
                        new
                        {
                            Id = 17,
                            ActivityTypeId = 5,
                            ReviewTypeId = 1,
                            Xp = 0
                        },
                        new
                        {
                            Id = 18,
                            ActivityTypeId = 5,
                            ReviewTypeId = 2,
                            Xp = 10
                        },
                        new
                        {
                            Id = 19,
                            ActivityTypeId = 5,
                            ReviewTypeId = 3,
                            Xp = 100
                        },
                        new
                        {
                            Id = 20,
                            ActivityTypeId = 5,
                            ReviewTypeId = 4,
                            Xp = 200
                        },
                        new
                        {
                            Id = 21,
                            ActivityTypeId = 6,
                            ReviewTypeId = 1,
                            Xp = 0
                        },
                        new
                        {
                            Id = 22,
                            ActivityTypeId = 6,
                            ReviewTypeId = 2,
                            Xp = 10
                        },
                        new
                        {
                            Id = 23,
                            ActivityTypeId = 6,
                            ReviewTypeId = 3,
                            Xp = 100
                        },
                        new
                        {
                            Id = 24,
                            ActivityTypeId = 6,
                            ReviewTypeId = 4,
                            Xp = 250
                        });
                });

            modelBuilder.Entity("Domain.ActivityType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "GoodDeed"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Joke"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Quote"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Puzzle"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Happening"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Challenge"
                        });
                });

            modelBuilder.Entity("Domain.PendingActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("XpReward")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("PendingActivities");
                });

            modelBuilder.Entity("Domain.PendingActivityMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityPendingId")
                        .HasColumnType("int");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityPendingId");

                    b.ToTable("PendingActivityMedia");
                });

            modelBuilder.Entity("Domain.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Expires")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("Revoked")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Domain.ReviewType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ReviewTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Poor"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Good"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Awesome"
                        });
                });

            modelBuilder.Entity("Domain.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Domain.SkillActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Counter")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SkillActivities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Counter = 2,
                            Level = 0
                        },
                        new
                        {
                            Id = 2,
                            Counter = 3,
                            Level = 1
                        },
                        new
                        {
                            Id = 3,
                            Counter = 4,
                            Level = 2
                        },
                        new
                        {
                            Id = 4,
                            Counter = 5,
                            Level = 3
                        });
                });

            modelBuilder.Entity("Domain.SkillSpecial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityTypeOneId")
                        .HasColumnType("int");

                    b.Property<int?>("ActivityTypeTwoId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeOneId");

                    b.HasIndex("ActivityTypeTwoId");

                    b.ToTable("SkillSpecials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityTypeOneId = 1,
                            Title = "Dobrica"
                        },
                        new
                        {
                            Id = 2,
                            ActivityTypeOneId = 2,
                            Title = "Šaljivdžija"
                        },
                        new
                        {
                            Id = 3,
                            ActivityTypeOneId = 3,
                            Title = "Filozof"
                        },
                        new
                        {
                            Id = 4,
                            ActivityTypeOneId = 4,
                            Title = "Mozgalo"
                        },
                        new
                        {
                            Id = 5,
                            ActivityTypeOneId = 5,
                            Title = "Inicijator"
                        },
                        new
                        {
                            Id = 6,
                            ActivityTypeOneId = 6,
                            Title = "Izazivač"
                        },
                        new
                        {
                            Id = 7,
                            ActivityTypeOneId = 1,
                            ActivityTypeTwoId = 2,
                            Title = "Veseljak"
                        },
                        new
                        {
                            Id = 8,
                            ActivityTypeOneId = 1,
                            ActivityTypeTwoId = 3,
                            Title = "Savetnik"
                        },
                        new
                        {
                            Id = 9,
                            ActivityTypeOneId = 1,
                            ActivityTypeTwoId = 4,
                            Title = "Profesor"
                        },
                        new
                        {
                            Id = 10,
                            ActivityTypeOneId = 1,
                            ActivityTypeTwoId = 5,
                            Title = "Redar"
                        },
                        new
                        {
                            Id = 11,
                            ActivityTypeOneId = 1,
                            ActivityTypeTwoId = 6,
                            Title = "Pravednik"
                        },
                        new
                        {
                            Id = 12,
                            ActivityTypeOneId = 2,
                            ActivityTypeTwoId = 3,
                            Title = "Aforizmičar"
                        },
                        new
                        {
                            Id = 13,
                            ActivityTypeOneId = 2,
                            ActivityTypeTwoId = 4,
                            Title = "Enigmatičar"
                        },
                        new
                        {
                            Id = 14,
                            ActivityTypeOneId = 2,
                            ActivityTypeTwoId = 5,
                            Title = "Komičar"
                        },
                        new
                        {
                            Id = 15,
                            ActivityTypeOneId = 2,
                            ActivityTypeTwoId = 6,
                            Title = "Vragolan"
                        },
                        new
                        {
                            Id = 16,
                            ActivityTypeOneId = 3,
                            ActivityTypeTwoId = 4,
                            Title = "Smarač"
                        },
                        new
                        {
                            Id = 17,
                            ActivityTypeOneId = 3,
                            ActivityTypeTwoId = 5,
                            Title = "Glasnik"
                        },
                        new
                        {
                            Id = 18,
                            ActivityTypeOneId = 3,
                            ActivityTypeTwoId = 6,
                            Title = "Životni trener"
                        },
                        new
                        {
                            Id = 19,
                            ActivityTypeOneId = 4,
                            ActivityTypeTwoId = 5,
                            Title = "Mađioničar"
                        },
                        new
                        {
                            Id = 20,
                            ActivityTypeOneId = 4,
                            ActivityTypeTwoId = 6,
                            Title = "Šibicar"
                        },
                        new
                        {
                            Id = 21,
                            ActivityTypeOneId = 5,
                            ActivityTypeTwoId = 6,
                            Title = "Aktivist"
                        });
                });

            modelBuilder.Entity("Domain.SkillXpBonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Multiplier")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SkillXpBonuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Level = 0,
                            Multiplier = 1
                        },
                        new
                        {
                            Id = 2,
                            Level = 1,
                            Multiplier = 2
                        },
                        new
                        {
                            Id = 3,
                            Level = 2,
                            Multiplier = 3
                        },
                        new
                        {
                            Id = 4,
                            Level = 3,
                            Multiplier = 4
                        });
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentXp")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("ImageApproved")
                        .HasColumnType("bit");

                    b.Property<string>("ImagePublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastRollDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SkillSpecialId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("XpLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SkillSpecialId");

                    b.HasIndex("XpLevelId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Domain.UserFavoriteActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId", "ActivityId")
                        .IsUnique();

                    b.ToTable("UserFavoriteActivities");
                });

            modelBuilder.Entity("Domain.UserReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ReviewTypeId");

                    b.HasIndex("UserId", "ActivityId")
                        .IsUnique();

                    b.ToTable("UserReviews");
                });

            modelBuilder.Entity("Domain.XpLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Xp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("XpLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Xp = 0
                        },
                        new
                        {
                            Id = 2,
                            Xp = 1000
                        },
                        new
                        {
                            Id = 3,
                            Xp = 3000
                        },
                        new
                        {
                            Id = 4,
                            Xp = 6000
                        },
                        new
                        {
                            Id = 5,
                            Xp = 10000
                        },
                        new
                        {
                            Id = 6,
                            Xp = 15000
                        },
                        new
                        {
                            Id = 7,
                            Xp = 21000
                        },
                        new
                        {
                            Id = 8,
                            Xp = 28000
                        },
                        new
                        {
                            Id = 9,
                            Xp = 36000
                        },
                        new
                        {
                            Id = 10,
                            Xp = 45000
                        },
                        new
                        {
                            Id = 11,
                            Xp = 55000
                        },
                        new
                        {
                            Id = 12,
                            Xp = 66000
                        },
                        new
                        {
                            Id = 13,
                            Xp = 78000
                        },
                        new
                        {
                            Id = 14,
                            Xp = 91000
                        },
                        new
                        {
                            Id = 15,
                            Xp = 105000
                        },
                        new
                        {
                            Id = 16,
                            Xp = 120000
                        },
                        new
                        {
                            Id = 17,
                            Xp = 136000
                        },
                        new
                        {
                            Id = 18,
                            Xp = 153000
                        },
                        new
                        {
                            Id = 19,
                            Xp = 171000
                        },
                        new
                        {
                            Id = 20,
                            Xp = 190000
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Activity", b =>
                {
                    b.HasOne("Domain.ActivityType", "ActivityType")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "User")
                        .WithMany("Activities")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.ActivityCreationCounter", b =>
                {
                    b.HasOne("Domain.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "User")
                        .WithMany("ActivityCreationCounters")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.ActivityMedia", b =>
                {
                    b.HasOne("Domain.Activity", "Activity")
                        .WithMany("ActivityMedias")
                        .HasForeignKey("ActivityId");
                });

            modelBuilder.Entity("Domain.ActivityReviewXp", b =>
                {
                    b.HasOne("Domain.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ReviewType", "ReviewType")
                        .WithMany()
                        .HasForeignKey("ReviewTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.PendingActivity", b =>
                {
                    b.HasOne("Domain.ActivityType", "ActivityType")
                        .WithMany("PendingActivities")
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "User")
                        .WithMany("PendingActivities")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.PendingActivityMedia", b =>
                {
                    b.HasOne("Domain.PendingActivity", "ActivityPending")
                        .WithMany("PendingActivityMedias")
                        .HasForeignKey("ActivityPendingId");
                });

            modelBuilder.Entity("Domain.RefreshToken", b =>
                {
                    b.HasOne("Domain.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Skill", b =>
                {
                    b.HasOne("Domain.ActivityType", "ActivityType")
                        .WithMany("Skills")
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "User")
                        .WithMany("Skills")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.SkillSpecial", b =>
                {
                    b.HasOne("Domain.ActivityType", "ActivityTypeOne")
                        .WithMany()
                        .HasForeignKey("ActivityTypeOneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ActivityType", "ActivityTypeTwo")
                        .WithMany()
                        .HasForeignKey("ActivityTypeTwoId");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.HasOne("Domain.SkillSpecial", "SkillSpecial")
                        .WithMany("Users")
                        .HasForeignKey("SkillSpecialId");

                    b.HasOne("Domain.XpLevel", "XpLevel")
                        .WithMany("Users")
                        .HasForeignKey("XpLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.UserFavoriteActivity", b =>
                {
                    b.HasOne("Domain.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.UserReview", b =>
                {
                    b.HasOne("Domain.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ReviewType", "ReviewType")
                        .WithMany()
                        .HasForeignKey("ReviewTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
